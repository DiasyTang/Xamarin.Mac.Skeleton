// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using Skeleton.Mac.ContactsTableView;
using CoreGraphics;

namespace Skeleton.Mac
{
    public partial class ContactTableView : NSTableView
    {
        private int Row = -1;
        public ContactTableView(IntPtr handle) : base(handle)
        {
        }

        public override void AwakeFromNib()
        {
            base.AwakeFromNib();
            foreach (var item in this.Menu.ItemArray())
            {
                switch (item.Title)
                {
                    case "Copy":
                        item.Activated += CopyMenu;
                        break;
                    case "View":
                        item.Activated += ViewMenu;
                        break;
                    case "Delete":
                        item.Activated += DeleteMenu;
                        break;
                    case "Export":
                        item.Activated += ExportMenu;
                        break;
                }
            }
        }

        private void ExportMenu(object sender, EventArgs e)
        {
            
        }

        private void DeleteMenu(object sender, EventArgs e)
        {
           
        }

        private void ViewMenu(object sender, EventArgs e)
        {
            
        }

        private void CopyMenu(object sender, EventArgs e)
        {

        }

        public override void WillOpenMenu(NSMenu menu, NSEvent theEvent)
        {
            base.WillOpenMenu(menu, theEvent);
            if (Row < 0)
            {
                menu.CancelTracking();
            }
        }

		public override NSView HitTest(CGPoint aPoint)
		{
            Row = (int)GetRow(aPoint);
            return base.HitTest(aPoint);
		}
		

        public delegate void ClickedDelegated(ContactItem item);
        public event ClickedDelegated Clicked;

        internal void RaiseClickedEvent(ContactItem item)
        {
            this.Clicked?.Invoke(item);
        }
    }
}
